#!/bin/bash
# TODO: For snapping, should the splice length be deduced from the pad length?
IFS=$'\t\n'
set -bmueo pipefail
now       () { echo "${EPOCHREALTIME/[,.]/}"; }
#~ rr        () { tr -cd "${1:-0-9}" < /dev/urandom > >(head -c"${2:-1}") || true; }
#~ ranel     () { echo "$(tr ' ' '\n' < <(echo "${@}") | shuf -n1)"; } # Random element from array
#~ relem     () { echo ${@:$((${EPOCHREALTIME/[,.]/}%${#}+1)):1}; } # Random arg from arg list
#~ ranint    () { /usr/bin/bc < <(echo "scale=0;${1:-0}+($(tr -d --complement '0-9' <  <(head -n6  /dev/urandom))%((${2:-1}-${1:-0}))+1)"); }
echo_b    () { echo -e  "\e[1;38m${1:-}\e[m"; }
terminate () { unlink "${bc_pipe}"; }
uniq_id   () { echo "${1}" | cksum -a crc | tr ' ' '_'; }
#~ is_int    () { [[ "${1}" =~ ^-?[0-9]+$ ]]; }
#~ is_num    () { [[ "${1}" =~ ^-?[0-9]*\.?[0-9]+$ ]]; }
rani      () { seq "-${2:-$1}" "${1:-1}" 2>/dev/null | shuf -n1; }

declare   bc_pipe="/tmp/bc_pipe_${BASHPID}"
init_bc   () { [[ -p "${bc_pipe}" ]] || mkfifo "${bc_pipe}"; exec 5> >(exec /usr/bin/bc -lq <(echo "scale=9") >"${bc_pipe}"); exec 6<"${bc_pipe}"; }
bc        () { echo >&5 "scale=${2:-12};${1:-0}"; read -u 6 x; echo "${x}"; }

randomize () {
    bc "${1}+(${1}*$(rani "${2}")/100)"
}

declare audio_output
declare file_output
declare sox_call
declare output_directory

### Environment modifiable variables ###
audio_output="${YASOTO_AUDIO_OUTPUT:--t alsa}"             # Default ALSA device is the default audio output.
file_output="${YASOTO_FILE_OUTPUT:--t flac}"
sox_call="${YASOTO_SOX_CALL:-/usr/bin/sox -q}"             # How do we call SoX.
create_replay_file="${YASOTO_CREATE_REPLAY_FILE:-false}"   # Do not create a SoX “replay” file unless told explicitly with YASOTO_CREATE_REPLAY_FILE=true.
output_directory="${YASOTO_SOXFILE_DIRECTORY:-.}"          # Where do we put the SoX file (ie: Bash script that can be executed later).
randomize_prct="${YASOTO_RANDOMIZE_PRCT:-5}"               # Randomize by 5% maximum (ie: from -5 to +5 % for "len" and "at")
smoothing_in_prct="${YASOTO_SMOOTHING_IN_PRCT:-1}"         # Smoothing fade-in (percent of beat length)
smoothing_out_prct="${YASOTO_SMOOTHING_OUT_PRCT:-2}"       # Smoothing fade-out (percent of beat length)

help () {
    cat<<EOF
Usage: $(basename "${0}") <sample file> <tempo> <loops> <snap> <SoX effects> [ <pattern item> <pattern item> … ]

Examples:

    $(basename "${0}") sample.wav 120 8 1 ''
    $(basename "${0}") sample.wav 120 8 1 'overdrive 20' '2,0,3' '.5,0,4'

EOF
}

[[ "${#}" -lt 5 ]] && { help; exit 2; }

init_bc
trap terminate EXIT

declare    sample_file="${1:--n}"
declare    tempo="${2:-60}"
declare -i nb_loops="${3:-1}"
declare    snap_beat="${4:-1}"
declare    more_sox="${5:-}"
shift 5
declare sample_length="$(sox --i -D "${sample_file}")"
declare beat_length="$(bc "1/(${tempo}/60)")"
declare T="$(LANG=C printf "%2.0f\n" "$(bc "${snap_beat}*${beat_length}*1000000")")"
declare smoothing_in="$(bc "${smoothing_in_prct}*${beat_length}/100")"
declare smoothing_out="$(bc "${smoothing_out_prct}*${beat_length}/100")"

if [[ "${create_replay_file}" = "true" ]]; then
    declare replay_filename="${output_directory}/$(now)-${BASHPID}-$(uniq_id "${sample_file}").sox"
    start_replay_file  () { echo -e "${sox_call} \\" > "${replay_filename}"; }
    add_to_replay_file () { echo -e "${1}" >> "${replay_filename}"; }
    end_replay_file    () { echo -e "${audio_output}" >> "${replay_filename}"; }
else
    start_replay_file  () { :; }
    add_to_replay_file () { :; }
    end_replay_file    () { :; }
fi

eval_fx () {
    case "${1}" in
        rise)
            shift
            echo "Rise FX with args: ${@}" >&2
        ;;
        pitch)
            shift
            echo "Pitch FX with args: ${@}" >&2
        ;;
        *) echo_b "${1}: Unknown FX!" >&2
    esac
}

sox_item () {
    # Triplet: len,at,num
    IFS=',' read -r len at num fx < <(echo "${1:-1,0,1,}")
    # TODO check args: they are two or three, "len" and "at" are decimal, "num" is integer. All three positive. "fx" isn’t SoX commands but ad-hoc effects which will generate some.
    at="$(bc "${at}%${len}" "0")" # In case provided "at" value is more than "len" ## TODO: Forbid the case? Turn to at=0? Would save a call to bc
    len_len="$(randomize "$(bc "${len}*${beat_length}")" "${randomize_prct}")"
    at_len="$(randomize "$(bc "${at}*${beat_length}")" "${randomize_prct}")"
    [[ "${fx}" ]] && IFS=' ' fx_sox="$(eval_fx ${fx} ${len_len})"
    local len_diff="$(bc "${sample_length}-(${len_len}-${at_len})")"
    if [[ "$(bc "${len_diff}>=0")" -eq 1 ]]; then
        # Sample is long enough, trim it
        echo "trim 0 $(bc "${sample_length}-${len_diff}") pad ${at_len} repeat $((num-1)) fade ${smoothing_in} 0 ${smoothing_out} "
    else
        # Sample is too short, end-pad it
        echo "pad 0 ${len_diff/-/} pad ${at_len} repeat $((num-1)) fade ${smoothing_in} 0 ${smoothing_out} "
    fi
}

### Main loop ###
start_replay_file
declare sleep_time_us
declare sleep_time
declare -i loop_index=0
[[ "${#}" -eq 0 ]] && set - '1,0,1' # No pattern item provided, put the simplest possible (length is 1 beat, start at 0, 1 note only)
while [[ $((loop_index++)) -lt "${nb_loops}" ]]; do
    if [[ "${T}" -ne 0 ]]; then
        sleep_time_us="$(bc "${T}-($(now)%${T})" "0")"
        sleep_time="$(bc "${sleep_time_us}/1000000")"
    else
        sleep_time=0
    fi
    for item in "${@}"; do
        #~ start_time="$(now)"
        sox_cmd="${sox_call} \""${sample_file}"\" ${audio_output} "
        sox_cmd+="$(sox_item "${item}") "
        sox_cmd+="pad ${sleep_time} "
        [[ "${more_sox}" ]] && sox_cmd+="fade ${smoothing_in} 0 ${smoothing_out} ${more_sox} fade ${smoothing_in}"
        eval "${sox_cmd}" &
        echo_b "[${loop_index}/${nb_loops}] ${sox_cmd}" >&2
        add_to_replay_file "<(${sox_cmd/ $audio_output / -t sox - }) \\"
        #~ echo Elapsed: $(( $(now) - start_time )) >&2
        wait -n -f
        end_replay_file
    done
done

